{"version":3,"sources":["MockClientPaginationTable.js","api/Api.js","ui/ExpandCollapse.js","ui/MockModalManager.js","ui/SimpleTable.js","App.js","WidgetElement.js"],"names":["mockRows","MockClientPaginationTable","props","totalPages","perPage","state","pagination","Math","ceil","length","onPageInput","e","setState","pageChangeValue","target","value","onSubmit","setPage","page","Number","isNaN","newPaginationState","Object","assign","onPerPageSelect","eventKey","onFirstPage","onPreviousPage","onNextPage","onLastPage","onSelectRow","event","row","updatedSelectedRows","updatedRow","onRowsLogger","rows","selectedRows","selectedRowIndex","findIndex","r","id","selected","filter","deselectRow","push","selectRow","onSelectAllRows","checked","currentRows","updatedSelections","Set","map","updatedRows","indexOf","ids","onRow","rowIndex","console","log","setSelectedContent","className","classNames","role","getSortingColumns","sortingColumns","sortableTransform","sort","onSort","selectedColumn","sortingOrder","defaultSortingOrder","strategy","byProperty","sortingFormatter","customHeaderFormatters","customHeaderFormattersDefinition","selectedContent","name","direction","TABLE_SORT_DIRECTION","ASC","position","columns","property","displayName","header","label","index","rowSpan","colSpan","transforms","formatters","customFormatters","sortableHeaderCellFormatter","cell","rowData","selectionCellFormatter","tableCellFormatter","perPageOptions","this","prevProps","prevState","compose","paginate","orderBy","sortedPaginatedRows","fluid","PfProvider","striped","bordered","hover","dataTable","components","cellProps","Header","headerRows","resolve","Body","rowKey","viewType","PAGINATION_VIEW","TABLE","pageInputValue","amountOfPages","itemCount","itemsStart","itemsEnd","React","Component","getCollectionTypes","token","a","axios","get","headers","data","getContents","collectionType","url","fetchContents","filterContentsByName","contentName","Error","ExpandCollapse","handleSubmit","preventDefault","runOnFilterData","values","handleInputChange","onClick","open","tabIndex","style","margin","display","type","onChange","placeholder","MockModalManager","selectedCollectionType","then","response","arr","el","attributes","componentDidMount","close","show","contentTypes","obj","uid","startsWith","isDisplayed","contentTypeRefine","forEach","element","info","collectionTypes","collectionTypeOnChange","persist","singularName","pluralName","Button","bsStyle","bsSize","Modal","minWidth","onHide","Icon","Title","htmlFor","xs","idx","Footer","SimpleTable","keys","contentAttribute","item","content","hasOwnProperty","createdBy","updatedAt","Type","createdAt","App","selectedContentArr","rightSide","WidgetElement","reactRootRef","createRef","mountPoint","current","document","createElement","appendChild","ReactDOM","render","ref","HTMLElement","window","customElements","define"],"mappings":"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","file":"static/js/main.406354f3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { orderBy } from 'lodash';\nimport classNames from 'classnames';\nimport * as sort from 'sortabular';\nimport * as resolve from 'table-resolver';\nimport {\n    actionHeaderCellFormatter,\n    customHeaderFormattersDefinition,\n    defaultSortingOrder,\n    selectionCellFormatter,\n    selectionHeaderCellFormatter,\n    sortableHeaderCellFormatter,\n    tableCellFormatter,\n    Table,\n    TABLE_SORT_DIRECTION\n} from 'patternfly-react';\nimport { MenuItem } from 'patternfly-react';\nimport { Grid } from 'patternfly-react';\nimport { PaginationRow, paginate, PAGINATION_VIEW } from 'patternfly-react';\nimport { compose } from 'react-recompose';\n// import { mockRows } from 'patternfly-react';\n\nconst mockRows = [\n    // {\n    //     additions: 272635,\n    //     commits: 711,\n    //     name: 'Dan',\n    //     gender: 'male',\n    //     id: 0,\n    //     eye_color: 'Blue',\n    //     location: 'London, UK',\n    //     username: 'gaearon',\n    //     state: 'UK'\n    // },\n    // {\n    //     additions: 203610,\n    //     commits: 476,\n    //     name: 'Sebastian',\n    //     gender: 'male',\n    //     id: 1,\n    //     eye_color: 'Green',\n    //     location: 'San Francisco, CA',\n    //     username: 'sebmarkbage',\n    //     state: 'UK'\n    // },\n    // {\n    //     additions: 114467,\n    //     commits: 828,\n    //     name: 'Sophie',\n    //     gender: 'female',\n    //     id: 2,\n    //     eye_color: 'Grey',\n    //     location: 'California',\n    //     username: 'sophiebits',\n    //     state: 'UK'\n    // },\n    // {\n    //     additions: 114467,\n    //     commits: 828,\n    //     name: 'Vijay',\n    //     gender: 'male',\n    //     id: 3,\n    //     eye_color: 'dark brown',\n    //     location: 'California',\n    //     username: 'sophiebits',\n    //     state: 'UK'\n    // },\n    // {\n    //     additions: 114467,\n    //     commits: 828,\n    //     name: 'Sachin',\n    //     gender: 'male',\n    //     id: 4,\n    //     eye_color: 'dark brown',\n    //     location: 'California',\n    //     username: 'sophiebits',\n    //     state: 'UK'\n    // },\n    // {\n    //     additions: 114467,\n    //     commits: 828,\n    //     name: 'Kamlesh',\n    //     gender: 'male',\n    //     id: 5,\n    //     eye_color: 'White',\n    //     location: 'California',\n    //     username: 'sophiebits',\n    //     state: 'UK'\n    // },\n    // {\n    //     additions: 114467,\n    //     commits: 828,\n    //     name: 'Tushar',\n    //     gender: 'male',\n    //     id: 6,\n    //     eye_color: 'Gold',\n    //     location: 'California',\n    //     username: 'sophiebits',\n    //     state: 'UK'\n    // }\n]\n\nexport class MockClientPaginationTable extends React.Component {\n    static selectRow(row) {\n        return Object.assign({}, row, { selected: true });\n    }\n    static deselectRow(row) {\n        return Object.assign({}, row, { selected: false });\n    }\n\n    constructor(props) {\n        super(props);\n\n        const getSortingColumns = () => this.state.sortingColumns || {};\n\n        const sortableTransform = sort.sort({\n            getSortingColumns,\n            onSort: selectedColumn => {\n                this.setState({\n                    sortingColumns: sort.byColumn({\n                        sortingColumns: this.state.sortingColumns,\n                        sortingOrder: defaultSortingOrder,\n                        selectedColumn\n                    })\n                });\n            },\n            // Use property or index dependening on the sortingColumns structure specified\n            strategy: sort.strategies.byProperty\n        });\n\n        const sortingFormatter = sort.header({\n            sortableTransform,\n            getSortingColumns,\n            strategy: sort.strategies.byProperty\n        });\n\n        // enables our custom header formatters extensions to reactabular\n        this.customHeaderFormatters = customHeaderFormattersDefinition;\n\n        this.state = {\n            // selectedContent \n            selectedContent: [],\n\n            // Sort the first column in an ascending way by default.\n            sortingColumns: {\n                name: {\n                    direction: TABLE_SORT_DIRECTION.ASC,\n                    position: 0\n                }\n            },\n\n            // column definitions\n            columns: [\n                {\n                    property: 'select',\n                    displayName: 'Select',\n                    header: {\n                        label: 'select',\n                        props: {\n                            index: 0,\n                            rowSpan: 1,\n                            colSpan: 1,\n                            id: 'select'\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                        // customFormatters: [selectionHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 0\n                        },\n                        formatters: [\n                            (value, { rowData, rowIndex }) => {\n                                return selectionCellFormatter(\n                                    { rowData, rowIndex },\n                                    this.onSelectRow,\n                                    `vybrat ${rowIndex}`, `vyberte řádek ${rowIndex}`\n                                );\n                            }\n                        ]\n                    }\n                },\n                {\n                    property: 'name',\n                    displayName: 'Names',\n                    header: {\n                        label: 'Name',\n                        props: {\n                            index: 1,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 1\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'email',\n                    header: {\n                        label: 'Created by',\n                        props: {\n                            index: 2,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 2\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'updatedAt',\n                    header: {\n                        label: 'Last edited',\n                        props: {\n                            index: 3,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 3\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'type',\n                    header: {\n                        label: 'Type',\n                        props: {\n                            index: 4,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 4\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'createdAt',\n                    header: {\n                        label: 'Created date',\n                        props: {\n                            index: 5,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 5\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'status',\n                    header: {\n                        label: 'Status',\n                        props: {\n                            index: 6,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 6\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                }\n                // {\n                //     property: 'actions',\n                //     header: {\n                //         label: 'Actions',\n                //         props: {\n                //             index: 7,\n                //             rowSpan: 1,\n                //             colSpan: 2\n                //         },\n                //         formatters: [actionHeaderCellFormatter]\n                //     },\n                //     cell: {\n                //         props: {\n                //             index: 7\n                //         },\n                //         formatters: [\n                //             (value, { rowData }) => {\n                //                 // console.log(\"npm i react-recompose\", rowData);\n                //                 return [\n                //                     <Table.Actions key=\"0\">\n                //                         <Table.Button\n                //                             onClick={() => alert('clicked ' + rowData.name)}\n                //                         >\n                //                             Actions\n                //                         </Table.Button>\n                //                     </Table.Actions>,\n                //                     <Table.Actions key=\"1\">\n                //                         <Table.DropdownKebab id=\"myKebab\" pullRight>\n                //                             <MenuItem>Action</MenuItem>\n                //                             <MenuItem>Another Action</MenuItem>\n                //                             <MenuItem>Something else here</MenuItem>\n                //                             <MenuItem divider />\n                //                             <MenuItem>Separated link</MenuItem>\n                //                         </Table.DropdownKebab>\n                //                     </Table.Actions>\n                //                 ];\n                //             }\n                //         ]\n                //     }\n                // }\n            ],\n\n            // rows and row selection state\n            rows: this.props.mockRows,\n            \n            // const [reloadToken, setReloadToken] = useState(((new Date()).getTime()).toString())\n\n            selectedRows: [],\n\n            // pagination default states\n            pagination: {\n                page: 1,\n                perPage: 6,\n                perPageOptions: [6, 10, 15]\n            },\n\n            // page input value\n            pageChangeValue: 1\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.mockRows) {\n            this.setState({ rows: this.props.mockRows })\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.mockRows !== prevProps.mockRows)\n            this.setState({ rows: this.props.mockRows })\n    }\n\n    totalPages = () => {\n        const { perPage } = this.state.pagination;\n        return Math.ceil(mockRows.length / perPage);\n    };\n    onPageInput = e => {\n        this.setState({ pageChangeValue: e.target.value });\n    };\n    onSubmit = () => {\n        this.setPage(this.state.pageChangeValue);\n    };\n    setPage = value => {\n        const page = Number(value);\n        if (\n            !Number.isNaN(value) &&\n            value !== '' &&\n            page > 0 &&\n            page <= this.totalPages()\n        ) {\n            let newPaginationState = Object.assign({}, this.state.pagination);\n            newPaginationState.page = page;\n            this.setState({ pagination: newPaginationState, pageChangeValue: page });\n        }\n    }\n    onPerPageSelect = (eventKey, e) => {\n        let newPaginationState = Object.assign({}, this.state.pagination);\n        newPaginationState.perPage = eventKey;\n        newPaginationState.page = 1;\n        this.setState({ pagination: newPaginationState });\n    };\n    onFirstPage = () => {\n        this.setPage(1);\n    };\n    onPreviousPage = () => {\n        if (this.state.pagination.page > 1) {\n            this.setPage(this.state.pagination.page - 1);\n        }\n    };\n    onNextPage = () => {\n        const { page } = this.state.pagination;\n        if (page < this.totalPages()) {\n            this.setPage(this.state.pagination.page + 1);\n        }\n    };\n    onLastPage = () => {\n        const { page } = this.state.pagination;\n        const totalPages = this.totalPages();\n        if (page < totalPages) {\n            this.setPage(totalPages);\n        }\n    };\n    onSelectRow = (event, row) => {\n        const { onRowsLogger } = this.props;\n        const { rows, selectedRows } = this.state;\n        const selectedRowIndex = rows.findIndex(r => r.id === row.id);\n        if (selectedRowIndex > -1) {\n            let updatedSelectedRows, updatedRow;\n            if (row.selected) {\n                updatedSelectedRows = selectedRows.filter(r => !(r === row.id));\n                updatedRow = MockClientPaginationTable.deselectRow(row);\n            } else {\n                selectedRows.push(row.id);\n                updatedSelectedRows = selectedRows;\n                updatedRow = MockClientPaginationTable.selectRow(row);\n            }\n            rows[selectedRowIndex] = updatedRow;\n            this.setState({\n                rows: rows,\n                selectedRows: updatedSelectedRows\n            });\n            onRowsLogger(rows.filter(r => r.selected));\n        }\n    };\n    onSelectAllRows = event => {\n        const { onRowsLogger } = this.props;\n        const { rows, selectedRows } = this.state;\n        const checked = event.target.checked;\n        const currentRows = this.currentRows().rows;\n\n        if (checked) {\n            const updatedSelections = [\n                ...new Set([...currentRows.map(r => r.id), ...selectedRows])\n            ];\n            const updatedRows = rows.map(r => {\n                return updatedSelections.indexOf(r.id) > -1 ? MockClientPaginationTable.selectRow(r) : r;\n            });\n            this.setState({\n                // important: you must update rows to force a re-render and trigger onRow hook\n                rows: updatedRows,\n                selectedRows: updatedSelections\n            });\n            onRowsLogger(updatedRows.filter(r => r.selected));\n        } else {\n            const ids = currentRows.map(r => r.id);\n            const updatedSelections = selectedRows.filter(r => {\n                return !(ids.indexOf(r) > -1);\n            });\n            const updatedRows = rows.map(r => {\n                return updatedSelections.indexOf(r.id) > -1 ? r : MockClientPaginationTable.deselectRow(r);\n            });\n            this.setState({\n                rows: updatedRows,\n                selectedRows: updatedSelections\n            });\n            onRowsLogger(updatedRows.filter(r => r.selected));\n        }\n    };\n    currentRows() {\n        const { rows, sortingColumns, columns, pagination } = this.state;\n        return compose(\n            paginate(pagination),\n            sort.sorter({\n                columns: columns,\n                sortingColumns,\n                sort: orderBy,\n                strategy: sort.strategies.byProperty\n            })\n        )(rows);\n    }\n    // TODO:\n    onRow = (row, { rowIndex }) => {\n        // IMP: Need to figure it out\n        // const { selectedRows } = this.state;\n        // IMP: For now remove later\n        console.log(\"ROW, ROWINDEX\", row, rowIndex)\n        this.props.setSelectedContent([row])\n        // this.setState({ selectedContent: [row] });\n        const selectedRows = mockRows\n\n        const selected = selectedRows.indexOf(row.id) > -1;\n        return {\n            className: classNames({ selected: selected }),\n            role: 'row'\n        };\n    }\n    render() {\n        const { columns, pagination, sortingColumns, pageChangeValue } = this.state;\n        const sortedPaginatedRows = this.currentRows();\n\n        return (\n            <Grid fluid>\n                <Table.PfProvider\n                    striped\n                    bordered\n                    hover\n                    dataTable\n                    columns={columns}\n                    components={{\n                        header: {\n                            cell: cellProps => {\n                                return this.customHeaderFormatters({\n                                    cellProps,\n                                    columns,\n                                    sortingColumns,\n                                    rows: sortedPaginatedRows.rows,\n                                    onSelectAllRows: this.onSelectAllRows\n                                });\n                            }\n                        }\n                    }}\n                >\n                    <Table.Header headerRows={resolve.headerRows({ columns })} />\n                    <Table.Body\n                        rows={sortedPaginatedRows.rows}\n                        rowKey=\"id\"\n                        onRow={this.onRow}\n                    />\n                </Table.PfProvider>\n                <PaginationRow\n                    viewType={PAGINATION_VIEW.TABLE}\n                    pagination={pagination}\n                    pageInputValue={pageChangeValue}\n                    amountOfPages={sortedPaginatedRows.amountOfPages}\n                    itemCount={sortedPaginatedRows.itemCount}\n                    itemsStart={sortedPaginatedRows.itemsStart}\n                    itemsEnd={sortedPaginatedRows.itemsEnd}\n                    onPerPageSelect={this.onPerPageSelect}\n                    onFirstPage={this.onFirstPage}\n                    onPreviousPage={this.onPreviousPage}\n                    onPageInput={this.onPageInput}\n                    onNextPage={this.onNextPage}\n                    onLastPage={this.onLastPage}\n                    onSubmit={this.onSubmit}\n                />\n            </Grid>\n        );\n    }\n}\n\n// MockClientPaginationTable.propTypes = {\n//     onRowsLogger: PropTypes.func.isRequired\n// };\n\n","import axios from 'axios';\n\nexport const postLoginAdmin = async (data) => {\n    return axios.post(`http://localhost:1337/admin/login`, data);\n}\n\n// GET Collection Type\nexport const getCollectionTypes = async (token) => {\n    token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjQ2MTM0MDIyLCJleHAiOjE2NDg3MjYwMjJ9.JbSvPdP5D-WNeDIvOX7SYELMdKW-NdrBFYkcROhr0-A'\n    const data = await axios.get(`http://localhost:1337/content-manager/content-types`, {\n        headers: {\n            'Authorization': `Bearer ${token}`\n        }\n    });\n    return data;\n}\n\nexport const getContents = async (collectionType) => {\n    let url = 'http://localhost:1337/api/' + collectionType;\n    const data = await axios.get(url);\n    return data;\n}\n\nexport const fetchContents = async (collectionType) => {\n    console.log(\"fetchContents\", collectionType)\n    // const url = `http://localhost:1337/api/${collectionType}`;\n    return await getContents(collectionType);\n}\n\n// FILTER API\nexport const filterContentsByName = async (collectionType, contentName) => {\n    if (!collectionType || !contentName) {\n        throw new Error('collectionType or contentName is missing');\n    }\n\n    let url = `http://localhost:1337/api/${collectionType}?filters[name][$containsi]=${contentName}`\n\n    return await axios.get(url)\n}","import React from \"react\";\n\nclass ExpandCollapse extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            values: {\n                name: ''\n            }\n        };\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.runOnFilterData(this.state.values.name);\n    };\n\n    handleInputChange = (event) => {\n        this.setState({\n            values: { [event.target.name]: event.target.value },\n        });\n    };\n\n    onClick = () => {\n        this.setState({ open: !this.state.open })\n    }\n\n    handleKeyDown() {\n\n    }\n\n    render() {\n        return (\n            <div\n                className=\"ContentsFilter well\"\n                role=\"button\"\n                tabIndex={0}\n                style={{ margin: '1rem 0rem' }}\n            >\n                <form onSubmit={this.handleSubmit}>\n                    <div style={{ display: 'flex', margin: '1rem 0rem' }}>\n                        <button id=\"dropdown-example\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" type=\"button\" className=\"dropdown-toggle btn btn-default\">Name <span className=\"caret\"></span></button>\n                        <input\n                            type=\"search\"\n                            name=\"name\"\n                            value={this.state.values.name}\n                            onChange={this.handleInputChange}\n                            role=\"combobox\"\n                            className=\"rbt-input-main form-control rbt-input\"\n                            placeholder=\"Search Content\"\n                        />\n                    </div>\n                    <button style={{ margin: \"0 auto 0% 96.5%\" }} className=\"btn btn-primary\">Search</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default ExpandCollapse;\n\n// <span className={`icon fa fa-chevron-${true ? 'down' : 'right'} CollapsibleSection__title-collapse-button`} />","import { Button } from 'patternfly-react/dist/js/components/Button'\nimport { FormGroup } from 'patternfly-react/dist/js/components/Form'\nimport { Col, Row } from 'patternfly-react/dist/js/components/Grid'\nimport { Icon } from 'patternfly-react/dist/js/components/Icon'\nimport { Modal } from 'patternfly-react/dist/js/components/Modal'\nimport React, { Component } from 'react'\nimport { fetchContents, filterContentsByName, getCollectionTypes } from '../api/Api'\nimport { MockClientPaginationTable } from '../MockClientPaginationTable'\nimport { TableBuilder } from '../helper/Helper'\nimport './MockModalManager.css'\nimport ExpandCollapse from './ExpandCollapse'\n\nexport default class MockModalManager extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { show: false, collectionTypes: [], mockRows: [], selectedContent: [], selectedCollectionType: null };\n    }\n\n    // TODO: mockRows\n    runOnFilterData = async (contentName) => {\n        await filterContentsByName(this.state.selectedCollectionType, contentName).then(response => {\n            const arr = response.data.data.map(el => {\n                el.attributes.id = el.id\n                return el.attributes\n            })\n            this.setState({ mockRows: arr });\n        });\n    }\n\n    componentDidMount = () => {\n    }\n\n    close = () => {\n        this.setState({ show: false })\n    }\n\n    open = async () => {\n        this.setState({ show: true })\n\n        let contentTypes = await getCollectionTypes();\n        contentTypes = contentTypes.data.data.filter(obj => {\n            return obj && (obj.uid && obj.uid.startsWith(\"api::\")) && obj.isDisplayed;\n        });\n        // console.log(contentTypes)\n        const contentTypeRefine = [];\n        contentTypes.length && contentTypes.forEach(element => {\n            contentTypeRefine.push(element.info)\n        });\n        this.setState({ collectionTypes: contentTypeRefine })\n    }\n\n    collectionTypeOnChange = (e) => {\n        e.persist()\n        this.state.collectionTypes.forEach(async (el) => {\n            if (el.singularName === e.target.value && e.target.value) {\n                this.setState({ selectedCollectionType: el.pluralName })\n                await fetchContents(el.pluralName).then(response => {\n                    // console.log(\"HJEUK\", response.data.data)\n\n                    const arr = response.data.data.map(el => {\n                        el.attributes.id = el.id\n                        return el.attributes\n                    })\n\n                    this.setState({ mockRows: arr });\n                });\n            }\n            // console.log(el)\n        })\n    }\n\n    render() {\n        return (\n            <>\n                <Button bsStyle=\"primary\" bsSize=\"large\" onClick={this.open}>\n                    Launch basic modal\n                </Button>\n\n                <Modal style={{ minWidth: \"72vw\" }} show={this.state.show} onHide={this.close}>\n                    <Modal.Header>\n                        <button\n                            className=\"close\"\n                            onClick={this.close}\n                            aria-hidden=\"true\"\n                            aria-label=\"Close\"\n                        >\n                            <Icon type=\"pf\" name=\"close\" />\n                        </button>\n                        <Modal.Title>Select Content</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div\n                            className=\"CollapsibleSection__title no-padding\"\n                            // onClick={onClick}\n                            // onKeyDown={handleKeyDown}\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                            {/* {<span>{name}</span> || (\n                                <FormattedMessage id={nameId} defaultMessage=\"Info\" />\n                            )} */}\n                            \n                        </div>\n                        <Row>\n                            <label className=\"control-label col-xs-3\" htmlFor=\"group\">\n                                {/* <FormattedMessage id=\"user.authority.groups\" /> */}Collection Type\n                            </label>\n                            <Col xs={9}>\n                                <select\n                                    className=\"form-control\"\n                                    name=\"group\"\n                                    data-testid={\"TEST_ID_USER_AUTHORITY_MODAL.GROUP_FIELD\"}\n                                    onChange={this.collectionTypeOnChange}\n                                >\n                                    <option value={0}>Select Collection Type</option>\n                                    {\n                                        this.state.collectionTypes.length && this.state.collectionTypes.map((collectionType, idx) => {\n                                            // console.log(collectionType)\n                                            return (\n                                                <option key={collectionType.singularName} value={collectionType.singularName}>{collectionType.pluralName}</option>\n                                            )\n                                        })\n                                    }\n                                </select>\n                            </Col>\n                        </Row>\n\n                        <ExpandCollapse runOnFilterData={this.runOnFilterData}/>\n\n                        {/* </FormGroup> */}\n                        <MockClientPaginationTable\n                            onRowsLogger={function noRefCheck() { }}\n                            mockRows={this.state.mockRows}\n                            setSelectedContent={this.props.setSelectedContent}\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            bsStyle=\"default\"\n                            className=\"btn-cancel\"\n                            onClick={this.close}\n                        >\n                            Cancel\n                        </Button>\n                        <Button bsStyle=\"primary\" onClick={this.close}>\n                            Save\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        )\n    }\n}\n","import React from \"react\";\n\nexport class SimpleTable extends React.Component {\n\n    render() {\n        return (\n            <table className=\"table dataTable table-striped table-bordered table-hover\">\n                <thead>\n                    <tr>\n                        {Object.keys(contentAttribute).map((item, idx) => <th key={idx}>{contentAttribute[item]}</th>)}\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        {this.props.content[0] && Object.keys(this.props.content[0]).map((item, idx) => {\n                            if (contentAttribute.hasOwnProperty(item)) return <td key={idx}>{this.props.content[0][item]}</td>\n                        })}\n                    </tr>\n                </tbody>\n            </table>\n        );\n    }\n}\n\n\nconst contentAttribute = {\n    name: \"Name\",\n    createdBy: \"Createdby\",\n    updatedAt: \"Lastedited\",\n    Type: \"Type\",\n    createdAt: \"Createddate\",\n    selected: \"status\"\n}","import React, { Component } from 'react';\n// import './App.css';\nimport {\n    CardGrid,\n    Row,\n    Col,\n    MenuItem,\n    Card,\n    CardTitle,\n    CardBody,\n    CardFooter,\n    CardDropdownButton,\n    Icon,\n    CardLink,\n    CardHeading,\n\n} from 'patternfly-react';\nimport { MockClientPaginationTable } from './MockClientPaginationTable';\nimport MockModalManager from './ui/MockModalManager';\nimport { TablePfProvider, TableHeader, } from 'patternfly-react/dist/js/components/Table';\nimport { SimpleTable } from './ui/SimpleTable';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContent: []\n        };\n    }\n\n    setSelectedContent = (selectedContentArr) => {\n        this.setState({ selectedContent: selectedContentArr })\n        console.log(\"APPA\",this.state)\n    }\n\n    render() {\n        return (\n            <div style={{ margin: \"8rem\" }}>\n                <MockModalManager rightSide={false} setSelectedContent={this.setSelectedContent} />\n                <SimpleTable content={this.state.selectedContent}/>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nclass WidgetElement extends HTMLElement {\n    constructor() {\n        super();\n        this.reactRootRef = React.createRef();\n        this.mountPoint = null;\n    }\n\n    // Big Hack\n    get config() {\n        return this.reactRootRef.current ? this.reactRootRef.current.state : {};\n    }\n\n    set config(value) {\n        return this.reactRootRef.current.setState(value);\n    }\n\n    connectedCallback() {\n        this.mountPoint = document.createElement('div');\n        this.appendChild(this.mountPoint);\n        ReactDOM.render(<App ref={this.reactRootRef} />, this.mountPoint);\n    }\n}\n\nwindow.customElements.define('my-widget-config', WidgetElement);\n\nexport default WidgetElement;\n"],"sourceRoot":""}